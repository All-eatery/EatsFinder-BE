generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("ENV_DATABASE_URL")
}

model Categories {
  id     BigInt   @id @default(autoincrement())
  name   String   @db.VarChar(6)
  type   String?  @db.VarChar(6)
  code   String?  @db.VarChar(6)
  places Places[]

  @@map("categories")
}

model Comments {
  id        BigInt    @id @default(autoincrement())
  content   String    @db.Text
  postId    BigInt    @map("post_id")
  userId    BigInt    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
  users     Users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK8omq0tc18jd43bu5tjh6jvraq")
  posts     Posts     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FKh4c7lvsc298whoyd4w9ta25cr")

  @@index([userId], map: "FK8omq0tc18jd43bu5tjh6jvraq")
  @@index([postId], map: "FKh4c7lvsc298whoyd4w9ta25cr")
  @@map("comments")
}

model EmailVerifications {
  id        BigInt   @id @default(autoincrement())
  email     String   @db.VarChar(30)
  code      String   @db.VarChar(10)
  complete  Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  expiredAt DateTime @map("expired_at") @db.Timestamp(6)

  @@map("email_verifications")
}

model Follows {
  id                                 BigInt   @id @default(autoincrement())
  followedUserId                     BigInt   @map("followed_user_id")
  followingUserId                    BigInt   @map("following_user_id")
  createdAt                          DateTime @default(now()) @map("created_at") @db.DateTime(6)
  usersFollowsFollowedUserIdTousers  Users    @relation("follows_followed_user_idTousers", fields: [followedUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FKfg3bo4whthco31ewoiaxpjhvi")
  usersFollowsFollowingUserIdTousers Users    @relation("follows_following_user_idTousers", fields: [followingUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FKk1b1yn6h0224kelm91qetqxen")

  @@index([followedUserId], map: "FKfg3bo4whthco31ewoiaxpjhvi")
  @@index([followingUserId], map: "FKk1b1yn6h0224kelm91qetqxen")
  @@map("follows")
}

model postLikes {
  id     BigInt @id @default(autoincrement())
  postId BigInt @map("post_id")
  userId BigInt @map("user_id")
  users  Users  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK81m3sbgvf0vhy7lgufppa4o5")
  posts  Posts  @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FKlcd6fjflxlit9llbxrmha8bfw")

  @@index([userId], map: "FK81m3sbgvf0vhy7lgufppa4o5")
  @@index([postId], map: "FKlcd6fjflxlit9llbxrmha8bfw")
  @@map("post_likes")
}

model Posts {
  id                                    BigInt         @id @default(autoincrement())
  content                               String?        @db.Text
  thumbnailUrl                          String         @map("thumbnail_url") @db.Text
  imageUrl                              String?        @map("image_url") @db.Text
  menuTag                               String?        @map("menu_tag") @db.Text
  likeCount                             Int            @default(0) @map("like_count")
  isOwner                               Boolean        @map("is_owner")
  userId                                BigInt         @map("user_id")
  placeId                               BigInt         @map("place_id")
  keywordId                             BigInt?        @map("keyword_id")
  ratingId                              BigInt         @map("rating_id")
  createdAt                             DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                             DateTime       @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt                             DateTime?      @map("deleted_at") @db.Timestamp(6)
  comments                              Comments[]
  likesByPosts                          postLikes[]
  starRatingsStarRatingsPostIdToposts   StarRatings[]  @relation("star_ratings_post_idToposts")
  starRatingsPostsRatingIdTostarRatings StarRatings    @relation("posts_rating_idTostar_ratings", fields: [ratingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FKonikjcopg9sp7kb852mjrxioj")
  users                                 Users          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK5lidm6cqbc7u4xhqpxm898qme")
  postKeywords                          PostKeywords?  @relation(fields: [keywordId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FKalrk2f4mefrfx07rjwcheb1jw")
  places                                Places         @relation(fields: [placeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FKt38bd81etfla6c1ilk3s0wm45")

  @@index([userId], map: "FK5lidm6cqbc7u4xhqpxm898qme")
  @@index([ratingId], map: "FKonikjcopg9sp7kb852mjrxioj")
  @@index([keywordId], map: "FKalrk2f4mefrfx07rjwcheb1jw")
  @@index([placeId], map: "FKt38bd81etfla6c1ilk3s0wm45")
  @@map("posts")
}

model StarRatings {
  id                              BigInt  @id @default(autoincrement())
  star                            Float   @db.Float
  postId                          BigInt  @map("post_id")
  postsPostsRatingIdTostarRatings Posts[] @relation("posts_rating_idTostar_ratings")
  postsStarRatingsPostIdToposts   Posts   @relation("star_ratings_post_idToposts", fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FKo6usan40orj7ig5w3t8udpqkx")

  @@index([postId], map: "FKo6usan40orj7ig5w3t8udpqkx")
  @@map("star_ratings")
}

model Users {
  id                                   BigInt          @id @default(autoincrement())
  email                                String          @db.VarChar(30)
  password                             String          @db.Text
  name                                 String          @db.VarChar(10)
  nickname                             String          @unique(map: "UK2ty1xmrrgtn89xt7kyxx6ta7h") @db.VarChar(10)
  phoneNumber                          String?         @map("phone_number") @db.VarChar(15)
  profileImage                         String?         @map("profile_image") @db.Text
  followerCount                        Int             @default(0) @map("follower_count")
  followingCount                       Int             @default(0) @map("following_count")
  role                                 UsersRole
  socialType                           UsersSocialType @map("social_type")
  status                               UsersStatus
  createdAt                            DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                            DateTime        @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt                            DateTime?       @map("deleted_at") @db.Timestamp(6)
  comments                             Comments[]
  followsFollowsFollowedUserIdTousers  Follows[]       @relation("follows_followed_user_idTousers")
  followsFollowsFollowingUserIdTousers Follows[]       @relation("follows_following_user_idTousers")
  likesByPosts                         postLikes[]
  posts                                Posts[]

  @@map("users")
}

model Places {
  id          BigInt       @id @default(autoincrement())
  name        String       @db.VarChar(100)
  address     String       @db.Text
  roadAddress String?      @map("road_address") @db.Text
  telephone   String?      @db.VarChar(15)
  x           Float        @db.Float
  y           Float        @db.Float
  categoryId  BigInt       @map("category_id")
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime     @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt   DateTime?    @map("deleted_at") @db.Timestamp(6)
  posts       Posts[]
  placeMenus  PlaceMenus[]
  categories  Categories   @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FKca17w9kt9f18v0lr91ssmivx5")

  @@index([categoryId], map: "FKca17w9kt9f18v0lr91ssmivx5")
  @@map("places")
}

model PostKeywords {
  id       BigInt  @id @default(autoincrement())
  category String  @db.VarChar(10)
  reaction String  @db.VarChar(15)
  posts    Posts[]

  @@map("post_keywords")
}

model PlaceMenus {
  id      BigInt @id @default(autoincrement())
  menu    String @db.Text
  placeId BigInt @map("place_id")
  places  Places @relation(fields: [placeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FKca17w9kt9fv0lrefer91ssmivx5")

  @@index([placeId], map: "FKca17w9kt9fv0lrefer91ssmivx5")
  @@map("place_menus")
}

enum UsersSocialType {
  GOOGLE
  KAKAO
  LOCAL
  NAVER

  @@map("users_social_type")
}

enum UsersRole {
  ADMIN
  OWNER
  USER

  @@map("users_role")
}

enum UsersStatus {
  AWAIT
  BAN
  NORMAL

  @@map("users_status")
}
